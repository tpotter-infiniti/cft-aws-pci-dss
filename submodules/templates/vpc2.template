--- 
AWSTemplateFormatVersion: 2010-09-09
Conditions: 
  cCreateBastionHost: 
    - true
    - pVPCprimary
  cDisable: 
    - "1"
    - "0"
  cEnable: 
    - "0"
    - "0"
  cEnableFlowLogs: 
    - 
      - pFlowLogGroup
      - ""
  cIsNotPrimaryVPC: 
    - 
      - "y"
      - pVPCprimary
  cIsPrimaryVPC: 
    - pVPCprimary
    - "y"
  cNeedNatInstance: 
    - false
    - pSupportsNatGateway
  cSubnetApri001: 
    - 
      - pSubnetApri001CIDR
      - ""
  cSubnetApri002: 
    - 
      - pSubnetApri002CIDR
      - ""
  cSubnetApri003: 
    - 
      - pSubnetApri003CIDR
      - ""
  cSubnetApub001: 
    - 
      - pSubnetApub001CIDR
      - ""
  cSubnetApub002: 
    - 
      - pSubnetApub002CIDR
      - ""
  cSubnetBpri001: 
    - 
      - pSubnetBpri001CIDR
      - ""
  cSubnetBpri002: 
    - 
      - pSubnetBpri002CIDR
      - ""
  cSubnetBpri003: 
    - 
      - pSubnetBpri003CIDR
      - ""
  cSubnetBpub001: 
    - 
      - pSubnetBpub001CIDR
      - ""
  cSubnetBpub002: 
    - 
      - pSubnetBpub002CIDR
      - ""
  cSupportsNatGateway: 
    - true
    - pSupportsNatGateway
  cVpcSgDebug: 
    - pVpcSgDebug
    - "yes"
Description: "Infrastructure (VPC, Default SG)"
Metadata: 
  ? "AWS::CloudFormation::Interface"
  : 
    ParameterGroups: 
      - 
        Label: 
          default: "Region Config"
        Parameters: 
          - pRegionAZ1Name
          - pRegionAZ2Name
      - 
        Label: 
          default: "Management VPC Configuration"
        Parameters: 
          - pManagementCIDR
          - pManagementDMZSubnetACIDR
          - pManagementDMZSubnetBCIDR
          - pVPCTenancy
      - 
        Label: 
          default: "AWS Quick Start Configuration"
        Parameters: 
          - QuickStartS3URL
          - QSS3BucketName
          - QSS3KeyPrefix
      - 
        Label: 
          default: "Optional Components - Bastion"
        Parameters: 
          - pCreateBastionHost
          - pEC2KeyPairBastion
          - pBastionInstanceType
          - pBastionAmi
          - pBastionSSHCIDR
    ParameterLabels: 
      QSS3BucketName: 
        default: "Quick Start S3 Bucket Name"
      QSS3KeyPrefix: 
        default: "Quick Start S3 Key Prefix"
      QuickStartS3URL: 
        default: "Quick Start URL"
      pBastionAmi: 
        default: "Bastion AMI"
      pBastionInstanceType: 
        default: "Bastion Instance Type"
      pBastionSSHCIDR: 
        default: "Bastion SSH CIDR"
      pCreateBastionHost: 
        default: "Create Bastion Host"
      pEC2KeyPairBastion: 
        default: "Bastion KeyPair"
      pManagementCIDR: 
        default: "CIDR block of Management VPC"
      pManagementDMZSubnetACIDR: 
        default: "CIDR block of Management DMZ SubnetA"
      pManagementDMZSubnetBCIDR: 
        default: "CIDR block of Management DMZ SubnetB"
      pVPCTenancy: 
        default: "Instance tenancy"
  Identifier: 
    Value: template-vpc-management
  Input: 
    Description: "CIDR blocks, VPC names, KeyName, EC2 instance size"
  Output: 
    Description: "Outputs ID of all deployed resources"
  Stack: 
    Value: 2
  VersionDate: 
    Value: 20160510
Outputs: 
  BastionInstanceEIP: 
    Condition: cIsPrimaryVPC
    Value: rEIPBastion
  BastionInstanceID: 
    Condition: cIsPrimaryVPC
    Value: rMgmtBastionInstance
  MgtPeeringConnection: 
    Condition: cIsNotPrimaryVPC
    Value: rPeeringConnectionManagement
  RouteTablePrivateA: 
    Value: rRouteTablePrivateA
  RouteTablePrivateB: 
    Value: rRouteTablePrivateB
  RouteTablePublicA: 
    Value: rRouteTablePublicA
  RouteTablePublicB: 
    Value: rRouteTablePublicB
  SecurityGroupDefault: 
    Value: rSecurityGroupDefault
  SecurityGroupSSHFromMgmt: 
    Condition: cIsPrimaryVPC
    Value: rSecurityGroupSSHFromMgmt
  SecurityGroupVpcNat: 
    Value: rSecurityGroupVpcNat
  SubnetApri001: 
    Condition: cSubnetApri001
    Description: "Private subnet a-pri-001 (app)"
    Value: rSubnetApri001
  SubnetApri002: 
    Condition: cSubnetApri002
    Description: "Private subnet a-pri-002 (db)"
    Value: rSubnetApri002
  SubnetApri003: 
    Condition: cSubnetApri003
    Description: "Private subnet a-pri-003 (optional)"
    Value: rSubnetApri003
  SubnetApub001: 
    Condition: cSubnetApub001
    Description: "Public subnet a-pub-001"
    Value: rSubnetApub001
  SubnetApub002: 
    Condition: cSubnetApub002
    Description: "Public subnet a-pub-002  (optional)"
    Value: rSubnetApub002
  SubnetBpri001: 
    Condition: cSubnetBpri001
    Description: "Private subnet b-pri-001 (app)"
    Value: rSubnetBpri001
  SubnetBpri002: 
    Condition: cSubnetBpri002
    Description: "Private subnet b-pri-002 (db)"
    Value: rSubnetBpri002
  SubnetBpri003: 
    Condition: cSubnetBpri003
    Description: "Private subnet b-pri-003 (optional)"
    Value: rSubnetBpri003
  SubnetBpub001: 
    Condition: cSubnetBpub001
    Description: "Public subnet b-pub-001"
    Value: rSubnetBpub001
  SubnetBpub002: 
    Condition: cSubnetApub002
    Description: "Public subnet b-pub-002  (optional)"
    Value: rSubnetBpub002
  Vpcid: 
    Description: "VPC ID"
    Value: rVPC
Parameters: 
  QSS3BucketName: 
    AllowedPattern: "^[0-9a-zA-Z]+([0-9a-zA-Z\\-\\.]*[0-9a-zA-Z])*$"
    ConstraintDescription: "Quick Start bucket name can include numbers, lowercase letters, uppercase letters, periods (.), and hyphens (-). It cannot start or end with a hyphen (-)."
    Default: quickstart-reference
    Description: "S3 bucket name for the Quick Start assets. Quick Start bucket name can include numbers, lowercase letters, uppercase letters, periods (.), and hyphens (-). It cannot start or end with a hyphen (-)."
    Type: String
  QSS3KeyPrefix: 
    AllowedPattern: "^[0-9a-zA-Z-]+(/[0-9a-zA-Z-]+)*$"
    ConstraintDescription: "Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/). It cannot start or end with forward slash (/) because they are automatically appended."
    Default: none
    Description: "S3 key prefix for the Quick Start assets. Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/). It cannot start or end with forward slash (/) because they are automatically appended."
    Type: String
  QuickStartS3URL: 
    Default: "https://s3.amazonaws.com"
    Description: "Quick Start S3 URL prefix."
    Type: String
  pBastionAmi: 
    Default: ""
    Description: "AMI to use for bastion host"
    Type: String
  pBastionInstanceType: 
    Default: t2.small
    Description: "Bastion EC2 instance type"
    Type: String
  pBastionSSHCIDR: 
    Default: 0.0.0.0/0
    Description: "The CIDR Allowed SSH access to the bastion host"
    Type: String
  pCreateBastionHost: 
    AllowedValues: 
      - true
      - false
    Default: false
    Description: "Should a Bastion host be created inside the DMZ Subnet(s)?"
    Type: String
  pEC2KeyPair: 
    Default: ""
    Description: "Name of existing EC2 key pair for production hosts"
    Type: String
  pEC2KeyPairBastion: 
    Default: ""
    Description: "Name of existing EC2 key pair for BASTION hosts"
    Type: String
  pEnvironment: 
    Default: development
    Description: "Environment (development, test, or production)"
    Type: String
  pFlowLogGroup: 
    Default: ""
    Description: "Log Group for capturing VPC Flow Logs"
    Type: String
  pManagementCIDR: 
    Default: ""
    Description: "CIDR block for Management VPC"
    Type: String
  pManagementDMZSubnetACIDR: 
    Default: none
    Description: "CIDR block for Management AZ-1a subnet"
    Type: String
  pManagementDMZSubnetBCIDR: 
    Default: none
    Description: "CIDR block for Management AZ-1b subnet"
    Type: String
  pManagementPrivateSubnetACIDR: 
    Default: none
    Description: "CIDR block for Management AZ-1a subnet"
    Type: String
  pManagementPrivateSubnetBCIDR: 
    Default: none
    Description: "CIDR block for Management AZ-1b subnet"
    Type: String
  pMgtRouteTableApri: 
    Default: none
    Description: "Management route table AZ 1 Private"
    Type: String
  pMgtRouteTableApub: 
    Default: none
    Description: "Management route table AZ 1 Public"
    Type: String
  pMgtRouteTableBpri: 
    Default: none
    Description: "Management route table AZ 1 Public"
    Type: String
  pMgtRouteTableBpub: 
    Default: none
    Description: "Management route table AZ 1 Public"
    Type: String
  pMgtVpcid: 
    Default: none
    Description: "Primary VPC ID"
    Type: String
  pNatAmi: 
    Default: ""
    Description: "AMI to use for the NAT intstance if the region does not support NAT Gateway (this value is determined by the main stack if it is invoked from there)"
    Type: String
  pNatInstanceType: 
    Default: ""
    Description: "Instance type to use for the NAT intstance if the region does not support NAT Gateway (this value is determined by the main stack if it is invoked from there)"
    Type: String
  pProduct: 
    Default: none
    Description: "Product or application name"
    Type: String
  pRegion: 
    Default: none
    Description: "IATA abbreviation for region"
    Type: String
  pRegionAZ1Name: 
    Default: us-east-1b
    Description: "Availability Zone 1 Name in Region"
    Type: String
  pRegionAZ2Name: 
    Default: us-west-1c
    Description: "Availability Zone 2 Name in Region"
    Type: String
  pRouteTableProdPrivate: 
    Default: ""
    Description: "Route Table ID for Prod VPC Private"
    Type: String
  pRouteTableProdPublic: 
    Default: ""
    Description: "Route Table ID for Prod VPC Public"
    Type: String
  pSubnetApri001: 
    Default: ""
    Type: String
  pSubnetApri001CIDR: 
    Default: ""
    Description: "CIDR block for Private AZ A-001 subnet"
    Type: String
  pSubnetApri002: 
    Default: ""
    Type: String
  pSubnetApri002CIDR: 
    Default: ""
    Description: "CIDR block for Private AZ A-002 subnet"
    Type: String
  pSubnetApri003: 
    Default: ""
    Type: String
  pSubnetApri003CIDR: 
    Default: ""
    Description: "CIDR block for Private AZ A-003 subnet"
    Type: String
  pSubnetApub001: 
    Default: ""
    Type: String
  pSubnetApub001CIDR: 
    Default: ""
    Description: "CIDR block for Public AZ A-001 subnet"
    Type: String
  pSubnetApub002: 
    Default: ""
    Type: String
  pSubnetApub002CIDR: 
    Default: ""
    Description: "CIDR block for Public AZ A-002 subnet"
    Type: String
  pSubnetBpri001CIDR: 
    Default: ""
    Type: String
  pSubnetBpri002CIDR: 
    Default: ""
    Type: String
  pSubnetBpri003CIDR: 
    Default: ""
    Type: String
  pSubnetBpub001CIDR: 
    Default: ""
    Type: String
  pSubnetBpub002CIDR: 
    Default: ""
    Type: String
  pSupportsNatGateway: 
    Default: true
    Description: "Specifies whether this region supports NAT Gateway (this value is determined by the main stack if it is invoked from there)"
    Type: String
  pVPCTenancy: 
    AllowedValues: 
      - default
      - dedicated
    Default: default
    Description: "Instance tenancy behavior for this VPC"
    Type: String
  pVPCprimary: 
    Default: "n"
    Type: String
  pVpcCIDR: 
    Description: "CIDR block for Production VPC"
    Type: String
  pVpcSgDebug: 
    Default: "no"
    Type: String
Resources: 
  DdnsRule: 
    Properties: 
      Description: "trigger whenever CloudWatch detects a change to the state of an EC2 instance"
      EventPattern: 
        detail: 
          state: 
            - running
            - shutting-down
            - stopped
        detail-type: 
          - "EC2 Instance State-change Notification"
        source: 
          - aws.ec2
      Name: 
        - "-"
        - 
          - pProduct
          - pRegion
          - pEnvironment
          - ec2_lambda_ddns_rule
      State: ENABLED
      Targets: 
        - 
          Arn: 
            ? "Fn::GetAtt"
            : 
              - ddnslambda
              - Arn
          Id: TargetFunctionV1
    Type: "AWS::Events::Rule"
  PermissionForEventsToInvokeLambda: 
    Properties: 
      Action: "lambda:InvokeFunction"
      FunctionName: 
        Ref: ddnslambda
      Principal: events.amazonaws.com
      SourceArn: 
        ? "Fn::GetAtt"
        : 
          - DdnsRule
          - Arn
    Type: "AWS::Lambda::Permission"
  ddnslambda: 
    Properties: 
      Code: 
        S3Bucket: 
          Ref: QSS3BucketName
        S3Key: union.py.zip
      Description: "Create A and PTR records for Private Hosted Zone for EC2 instance launches"
      FunctionName: 
        - "-"
        - 
          - pProduct
          - pRegion
          - pEnvironment
          - lambda-ddns
      Handler: union.lambda_handler
      Role: ddnslambdarole.Arn
      Runtime: python2.7
      Timeout: "30"
    Type: "AWS::Lambda::Function"
  ddnslambdarole: 
    Properties: 
      AssumeRolePolicyDocument: 
        Statement: 
          - 
            Action: "sts:AssumeRole"
            Effect: Allow
            Principal: 
              Service: lambda.amazonaws.com
            Sid: ""
        Version: "2012-10-17"
      Policies: 
        - 
          PolicyDocument: 
            Statement: 
              - 
                Action: "ec2:Describe*"
                Effect: Allow
                Resource: "*"
              - 
                Action: 
                  - "dynamodb:*"
                Effect: Allow
                Resource: "*"
              - 
                Action: 
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Effect: Allow
                Resource: "*"
              - 
                Action: 
                  - "route53:*"
                Effect: Allow
                Resource: 
                  - "*"
            Version: "2012-10-17"
          PolicyName: 
            - "-"
            - 
              - pProduct
              - pRegion
              - pEnvironment
              - lambda-ddns-role
      RoleName: 
        - "-"
        - 
          - pProduct
          - pRegion
          - pEnvironment
          - lambda-ddns-role
    Type: "AWS::IAM::Role"
  r53Internal: 
    Properties: 
      Name: 
        - "."
        - 
          - pEnvironment
          - pRegion
          - pProduct
          - int.
      VPCs: 
        - 
          VPCId: rVPC
          VPCRegion: "AWS::Region"
    Type: "AWS::Route53::HostedZone"
  rEIPBastion: 
    Condition: cIsPrimaryVPC
    DependsOn: rMgmtBastionInstance
    Properties: 
      Domain: vpc
    Type: "AWS::EC2::EIP"
  rEIPBastionAssociate: 
    Condition: cIsPrimaryVPC
    DependsOn: rEIPBastion
    Properties: 
      AllocationId: rEIPBastion.AllocationId
      NetworkInterfaceId: rENIBastion
    Type: "AWS::EC2::EIPAssociation"
  rEIPProdNATa: 
    Properties: 
      Domain: vpc
    Type: "AWS::EC2::EIP"
  rEIPProdNATb: 
    Properties: 
      Domain: vpc
    Type: "AWS::EC2::EIP"
  rENIBastion: 
    Condition: cIsPrimaryVPC
    Properties: 
      Description: "Interface for Bastion device"
      GroupSet: 
        - rSecurityGroupBastion
      SubnetId: rSubnetApub001
      Tags: 
        - 
          Key: Network
          Value: MgmtBastionDevice
    Type: "AWS::EC2::NetworkInterface"
  rENInatInstanceInterface: 
    Properties: 
      Description: "Interface for Nat device"
      GroupSet: 
        - rSecurityGroupSSHFromMgmt
        - rSecurityGroupVpcNat
      SubnetId: rSubnetApub001
      Tags: 
        - 
          Key: Network
          Value: rENInatInstanceInterface
    Type: "AWS::EC2::NetworkInterface"
  rEipNat: 
    Properties: 
      Domain: vpc
    Type: "AWS::EC2::EIP"
  rEipNatAssociater: 
    Properties: 
      AllocationId: rEipNat.AllocationId
      NetworkInterfaceId: rENInatInstanceInterface
    Type: "AWS::EC2::EIPAssociation"
  rIGW: 
    Properties: 
      Tags: 
        - 
          Key: Name
          Value: 
            ? "Fn::Join"
            : 
              - "-"
              - 
                - pProduct
                - pRegion
                - pEnvironment
                - igw
    Type: "AWS::EC2::InternetGateway"
  rIGWAttachment: 
    Properties: 
      InternetGatewayId: rIGW
      VpcId: rVPC
    Type: "AWS::EC2::VPCGatewayAttachment"
  rIamFlowLogsServiceRole: 
    Condition: cEnableFlowLogs
    Properties: 
      AssumeRolePolicyDocument: 
        Statement: 
          - 
            Action: "sts:AssumeRole"
            Effect: Allow
            Principal: 
              Service: vpc-flow-logs.amazonaws.com
            Sid: AllowFlowLogs
        Version: 2012-10-17
      Path: /
      Policies: 
        - 
          PolicyDocument: 
            Statement: 
              - 
                Action: 
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                  - "logs:DescribeLogGroups"
                  - "logs:DescribeLogStreams"
                Effect: Allow
                Resource: "*"
            Version: 2012-10-17
          PolicyName: cloudwatchlogsrole
      RoleName: 
        - "-"
        - 
          - pProduct
          - pRegion
          - pEnvironment
          - iam-flowlogs
    Type: "AWS::IAM::Role"
  rMgmtBastionInstance: 
    Condition: cIsPrimaryVPC
    Properties: 
      ImageId: pBastionAmi
      InstanceType: pBastionInstanceType
      KeyName: pEC2KeyPairBastion
      NetworkInterfaces: 
        - 
          DeviceIndex: 0
          NetworkInterfaceId: rENIBastion
      Tags: 
        - 
          Key: Name
          Value: 
            ? "Fn::Join"
            : 
              - "-"
              - 
                - pProduct
                - pRegion
                - pEnvironment
                - a-bsn-001
        - 
          Key: ZONE
          Value: 
            - "."
            - 
              - pEnvironment
              - pRegion
              - pProduct
              - int.
        - 
          Key: CNAME
          Value: 
            - "."
            - 
              - bsn001a
              - pEnvironment
              - pRegion
              - pProduct
              - int.
      UserData: |
          #!/bin/bash
          yum update -y
    Type: "AWS::EC2::Instance"
  rNatGatewayA: 
    Condition: cSupportsNatGateway
    DependsOn: rIGW
    Properties: 
      AllocationId: rEIPProdNATa.AllocationId
      SubnetId: rSubnetApub001
    Type: "AWS::EC2::NatGateway"
  rNatGatewayB: 
    Condition: cSupportsNatGateway
    DependsOn: rIGW
    Properties: 
      AllocationId: rEIPProdNATb.AllocationId
      SubnetId: rSubnetBpub001
    Type: "AWS::EC2::NatGateway"
  rNatInstanceTemplateA: 
    Condition: cNeedNatInstance
    Properties: 
      Parameters: 
        pDMZSubnetA: rSubnetApub001
        pEC2KeyPair: pEC2KeyPair
        pEipNatAllocationId: rEIPProdNATa.AllocationId
        pNatAmi: pNatAmi
        pNatInstanceType: pNatInstanceType
        pRouteTablePrivate: rRouteTablePrivateA
        pSecurityGroupSSHFromVpc: rSecurityGroupSSHFromMgmt
        pSecurityGroupVpcNat: rSecurityGroupVpcNat
        pVpcId: rVPC
        pVpcName: 
          ? "Fn::Join"
          : 
            - "-"
            - 
              - pProduct
              - pRegion
              - pEnvironment
              - a-ngw
      TemplateURL: "${QuickStartS3URL}/${QSS3BucketName}/${QSS3KeyPrefix}/submodules/templates/nat-instance.template"
      TimeoutInMinutes: 20
    Type: "AWS::CloudFormation::Stack"
  rNatInstanceTemplateB: 
    Condition: cNeedNatInstance
    Properties: 
      Parameters: 
        pDMZSubnetB: rSubnetApub001
        pEC2KeyPair: pEC2KeyPair
        pEipNatAllocationId: rEIPProdNATb.AllocationId
        pNatAmi: pNatAmi
        pNatInstanceType: pNatInstanceType
        pRouteTablePrivate: rRouteTablePrivateB
        pSecurityGroupSSHFromVpc: rSecurityGroupSSHFromMgmt
        pSecurityGroupVpcNat: rSecurityGroupVpcNat
        pVpcId: rVPC
        pVpcName: 
          ? "Fn::Join"
          : 
            - "-"
            - 
              - pProduct
              - pRegion
              - pEnvironment
              - b-ngw
      TemplateURL: "${QuickStartS3URL}/${QSS3BucketName}/${QSS3KeyPrefix}/submodules/templates/nat-instance.template"
      TimeoutInMinutes: 20
    Type: "AWS::CloudFormation::Stack"
  rPeeringConnectionManagement: 
    Condition: cIsNotPrimaryVPC
    Properties: 
      PeerVpcId: pMgtVpcid
      Tags: 
        - 
          Key: Name
          Value: 
            - "-"
            - 
              - pProduct
              - pRegion
              - peer
              - pEnvironment
              - to
              - mgt
        - 
          Key: Environment
          Value: pEnvironment
      VpcId: rVPC
    Type: "AWS::EC2::VPCPeeringConnection"
  rRouteIGWa: 
    DependsOn: 
      - rIGW
    Properties: 
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: rIGW
      RouteTableId: rRouteTablePublicA
    Type: "AWS::EC2::Route"
  rRouteIGWb: 
    DependsOn: rIGW
    Properties: 
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: rIGW
      RouteTableId: rRouteTablePublicB
    Type: "AWS::EC2::Route"
  rRouteMgmtPrivateAToPeer: 
    Condition: cIsNotPrimaryVPC
    Properties: 
      DestinationCidrBlock: pVpcCIDR
      RouteTableId: pMgtRouteTableApri
      VpcPeeringConnectionId: rPeeringConnectionManagement
    Type: "AWS::EC2::Route"
  rRouteMgmtPrivateBToPeer: 
    Condition: cIsNotPrimaryVPC
    Properties: 
      DestinationCidrBlock: pVpcCIDR
      RouteTableId: pMgtRouteTableBpri
      VpcPeeringConnectionId: rPeeringConnectionManagement
    Type: "AWS::EC2::Route"
  rRouteMgmtPublicAToPeer: 
    Condition: cIsNotPrimaryVPC
    Properties: 
      DestinationCidrBlock: pVpcCIDR
      RouteTableId: pMgtRouteTableApub
      VpcPeeringConnectionId: rPeeringConnectionManagement
    Type: "AWS::EC2::Route"
  rRouteMgmtPublicBToPeer: 
    Condition: cIsNotPrimaryVPC
    Properties: 
      DestinationCidrBlock: pVpcCIDR
      RouteTableId: pMgtRouteTableBpub
      VpcPeeringConnectionId: rPeeringConnectionManagement
    Type: "AWS::EC2::Route"
  rRouteNatGWa: 
    Condition: cSupportsNatGateway
    Properties: 
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: rNatGatewayA
      RouteTableId: rRouteTablePrivateA
    Type: "AWS::EC2::Route"
  rRouteNatGWb: 
    Condition: cSupportsNatGateway
    Properties: 
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: rNatGatewayB
      RouteTableId: rRouteTablePrivateB
    Type: "AWS::EC2::Route"
  rRoutePeerMgmtPrivateA: 
    Condition: cIsNotPrimaryVPC
    Properties: 
      DestinationCidrBlock: pManagementCIDR
      RouteTableId: rRouteTablePrivateA
      VpcPeeringConnectionId: rPeeringConnectionManagement
    Type: "AWS::EC2::Route"
  rRoutePeerMgmtPrivateB: 
    Condition: cIsNotPrimaryVPC
    Properties: 
      DestinationCidrBlock: pManagementCIDR
      RouteTableId: rRouteTablePrivateB
      VpcPeeringConnectionId: rPeeringConnectionManagement
    Type: "AWS::EC2::Route"
  rRoutePeerMgmtPublicA: 
    Condition: cIsNotPrimaryVPC
    Properties: 
      DestinationCidrBlock: pManagementCIDR
      RouteTableId: rRouteTablePublicA
      VpcPeeringConnectionId: rPeeringConnectionManagement
    Type: "AWS::EC2::Route"
  rRoutePeerMgmtPublicB: 
    Condition: cIsNotPrimaryVPC
    Properties: 
      DestinationCidrBlock: pManagementCIDR
      RouteTableId: rRouteTablePublicB
      VpcPeeringConnectionId: rPeeringConnectionManagement
    Type: "AWS::EC2::Route"
  rRouteTableAssocApri001: 
    Condition: cSubnetApri001
    Properties: 
      RouteTableId: rRouteTablePrivateA
      SubnetId: rSubnetApri001
    Type: "AWS::EC2::SubnetRouteTableAssociation"
  rRouteTableAssocApri002: 
    Condition: cSubnetApri002
    Properties: 
      RouteTableId: rRouteTablePrivateA
      SubnetId: rSubnetApri002
    Type: "AWS::EC2::SubnetRouteTableAssociation"
  rRouteTableAssocApri003: 
    Condition: cSubnetApri003
    Properties: 
      RouteTableId: rRouteTablePrivateA
      SubnetId: rSubnetApri003
    Type: "AWS::EC2::SubnetRouteTableAssociation"
  rRouteTableAssocApub001: 
    Condition: cSubnetApub001
    Properties: 
      RouteTableId: rRouteTablePublicA
      SubnetId: rSubnetApub001
    Type: "AWS::EC2::SubnetRouteTableAssociation"
  rRouteTableAssocApub002: 
    Condition: cSubnetApub002
    Properties: 
      RouteTableId: rRouteTablePublicA
      SubnetId: rSubnetApub002
    Type: "AWS::EC2::SubnetRouteTableAssociation"
  rRouteTableAssocBpri001: 
    Condition: cSubnetBpri001
    Properties: 
      RouteTableId: rRouteTablePrivateB
      SubnetId: rSubnetBpri001
    Type: "AWS::EC2::SubnetRouteTableAssociation"
  rRouteTableAssocBpri002: 
    Condition: cSubnetBpri002
    Properties: 
      RouteTableId: rRouteTablePrivateB
      SubnetId: rSubnetBpri002
    Type: "AWS::EC2::SubnetRouteTableAssociation"
  rRouteTableAssocBpri003: 
    Condition: cSubnetBpri003
    Properties: 
      RouteTableId: rRouteTablePrivateB
      SubnetId: rSubnetBpri003
    Type: "AWS::EC2::SubnetRouteTableAssociation"
  rRouteTableAssocBpub001: 
    Condition: cSubnetBpub001
    Properties: 
      RouteTableId: rRouteTablePublicB
      SubnetId: rSubnetBpub001
    Type: "AWS::EC2::SubnetRouteTableAssociation"
  rRouteTableAssocBpub002: 
    Condition: cSubnetBpub002
    Properties: 
      RouteTableId: rRouteTablePublicB
      SubnetId: rSubnetBpub002
    Type: "AWS::EC2::SubnetRouteTableAssociation"
  rRouteTablePrivateA: 
    Properties: 
      Tags: 
        - 
          Key: Name
          Value: 
            ? "Fn::Join"
            : 
              - "-"
              - 
                - pProduct
                - pRegion
                - pEnvironment
                - rt-a-pri
      VpcId: rVPC
    Type: "AWS::EC2::RouteTable"
  rRouteTablePrivateB: 
    Properties: 
      Tags: 
        - 
          Key: Name
          Value: 
            ? "Fn::Join"
            : 
              - "-"
              - 
                - pProduct
                - pRegion
                - pEnvironment
                - rt-b-pri
      VpcId: rVPC
    Type: "AWS::EC2::RouteTable"
  rRouteTablePublicA: 
    Properties: 
      Tags: 
        - 
          Key: Name
          Value: 
            ? "Fn::Join"
            : 
              - "-"
              - 
                - pProduct
                - pRegion
                - pEnvironment
                - rt-a-pub
      VpcId: rVPC
    Type: "AWS::EC2::RouteTable"
  rRouteTablePublicB: 
    Properties: 
      Tags: 
        - 
          Key: Name
          Value: 
            ? "Fn::Join"
            : 
              - "-"
              - 
                - pProduct
                - pRegion
                - pEnvironment
                - rt-b-pub
      VpcId: rVPC
    Type: "AWS::EC2::RouteTable"
  rSecurityGroupBastion: 
    Condition: cIsPrimaryVPC
    Properties: 
      GroupDescription: "SG for Bastion Instances"
      SecurityGroupEgress: 
        - 
          CidrIp: 0.0.0.0/0
          FromPort: 1
          IpProtocol: tcp
          ToPort: 65535
      SecurityGroupIngress: 
        - 
          CidrIp: pBastionSSHCIDR
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
      Tags: 
        - 
          Key: Name
          Value: 
            ? "Fn::Join"
            : 
              - "-"
              - 
                - pProduct
                - pRegion
                - pEnvironment
                - sg-bastion
              - 
                Key: Environment
                Value: pEnvironment
      VpcId: rVPC
    Type: "AWS::EC2::SecurityGroup"
  rSecurityGroupDefault: 
    Properties: 
      GroupDescription: "default VPC security group"
      SecurityGroupIngress: 
        - 
          CidrIp: pManagementCIDR
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
      VpcId: rVPC
      Tags: 
      - 
        Key: Name
        Value: 
          ? "Fn::Join"
          : 
            - "-"
            - 
              - pProduct
              - pRegion
              - pEnvironment
              - sg-default
      - 
        Key: Environment
        Value: pEnvironment
    Type: "AWS::EC2::SecurityGroup"
  rSecurityGroupDefaultIngressDebug: 
    Condition: cVpcSgDebug
    Properties: 
      FromPort: "0"
      GroupId: 
        Ref: rSecurityGroupDefault
      IpProtocol: tcp
      SourceSecurityGroupId: 
        Ref: rSecurityGroupDefault
      ToPort: "65535"
    Type: "AWS::EC2::SecurityGroupIngress"
  rSecurityGroupSSHFromMgmt: 
    Properties: 
      GroupDescription: "Enable SSH access via port 22"
      SecurityGroupIngress: 
        - 
          CidrIp: pManagementCIDR
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
      Tags: 
        - 
          Key: Name
          Value: sg-ssh-access-from-management
        - 
          Key: Environment
          Value: pEnvironment
      VpcId: rVPC
    Type: "AWS::EC2::SecurityGroup"
  rSecurityGroupVpcNat: 
    Properties: 
      GroupDescription: "Allow NAT from Management VPC"
      SecurityGroupIngress: 
        - 
          CidrIp: pManagementCIDR
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
        - 
          CidrIp: pManagementCIDR
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
      Tags: 
        - 
          Key: Name
          Value: sg-web-access-ports-from-production
        - 
          Key: Environment
          Value: pEnvironment
      VpcId: rVPC
    Type: "AWS::EC2::SecurityGroup"
  rSubnetApri001: 
    Condition: cSubnetApri001
    Properties: 
      AvailabilityZone: pRegionAZ1Name
      CidrBlock: pSubnetApri001CIDR
      Tags: 
        - 
          Key: Name
          Value: 
            ? "Fn::Join"
            : 
              - "-"
              - 
                - pProduct
                - pRegion
                - pEnvironment
                - sn-a-pri-001
        - 
          Key: Environment
          Value: pEnvironment
      VpcId: rVPC
    Type: "AWS::EC2::Subnet"
  rSubnetApri002: 
    Condition: cSubnetApri002
    Properties: 
      AvailabilityZone: pRegionAZ1Name
      CidrBlock: pSubnetApri002CIDR
      Tags: 
        - 
          Key: Name
          Value: 
            ? "Fn::Join"
            : 
              - "-"
              - 
                - pProduct
                - pRegion
                - pEnvironment
                - sn-a-pri-002
        - 
          Key: Environment
          Value: pEnvironment
      VpcId: rVPC
    Type: "AWS::EC2::Subnet"
  rSubnetApri003: 
    Condition: cSubnetApri003
    Properties: 
      AvailabilityZone: pRegionAZ1Name
      CidrBlock: pSubnetApri003CIDR
      Tags: 
        - 
          Key: Name
          Value: 
            ? "Fn::Join"
            : 
              - "-"
              - 
                - pProduct
                - pRegion
                - pEnvironment
                - sn-a-pri-002
        - 
          Key: Environment
          Value: pEnvironment
      VpcId: rVPC
    Type: "AWS::EC2::Subnet"
  rSubnetApub001: 
    Condition: cSubnetApub001
    Properties: 
      AvailabilityZone: pRegionAZ1Name
      CidrBlock: pSubnetApub001CIDR
      Tags: 
        - 
          Key: Name
          Value: 
            ? "Fn::Join"
            : 
              - "-"
              - 
                - pProduct
                - pRegion
                - pEnvironment
                - sn-a-pub-001
                - 
                  Key: Environment
                  Value: pEnvironment
      VpcId: rVPC
    Type: "AWS::EC2::Subnet"
  rSubnetApub002: 
    Condition: cSubnetApub002
    Properties: 
      AvailabilityZone: pRegionAZ1Name
      CidrBlock: pSubnetApub002CIDR
      Tags: 
        - 
          Key: Name
          Value: 
            ? "Fn::Join"
            : 
              - "-"
              - 
                - pProduct
                - pRegion
                - pEnvironment
                - sn-a-pub-002
        - 
          Key: Environment
          Value: pEnvironment
      VpcId: rVPC
    Type: "AWS::EC2::Subnet"
  rSubnetBpri001: 
    Condition: cSubnetBpri001
    Properties: 
      AvailabilityZone: pRegionAZ2Name
      CidrBlock: pSubnetBpri001CIDR
      Tags: 
        - 
          Key: Name
          Value: 
            ? "Fn::Join"
            : 
              - "-"
              - 
                - pProduct
                - pRegion
                - pEnvironment
                - sn-b-pri-001
        - 
          Key: Environment
          Value: pEnvironment
      VpcId: rVPC
    Type: "AWS::EC2::Subnet"
  rSubnetBpri002: 
    Condition: cSubnetBpri002
    Properties: 
      AvailabilityZone: pRegionAZ2Name
      CidrBlock: pSubnetBpri002CIDR
      Tags: 
        - 
          Key: Name
          Value: 
            ? "Fn::Join"
            : 
              - "-"
              - 
                - pProduct
                - pRegion
                - pEnvironment
                - sn-b-pri-002
                - 
                  Key: Environment
                  Value: pEnvironment
      VpcId: rVPC
    Type: "AWS::EC2::Subnet"
  rSubnetBpri003: 
    Condition: cSubnetBpri003
    Properties: 
      AvailabilityZone: pRegionAZ2Name
      CidrBlock: pSubnetBpri003CIDR
      Tags: 
        - 
          Key: Name
          Value: 
            ? "Fn::Join"
            : 
              - "-"
              - 
                - pProduct
                - pRegion
                - pEnvironment
                - sn-b-pri-003
        - 
          Key: Environment
          Value: pEnvironment
      VpcId: rVPC
    Type: "AWS::EC2::Subnet"
  rSubnetBpub001: 
    Condition: cSubnetBpub001
    Properties: 
      AvailabilityZone: pRegionAZ2Name
      CidrBlock: pSubnetBpub001CIDR
      Tags: 
        - 
          Key: Name
          Value: 
            ? "Fn::Join"
            : 
              - "-"
              - 
                - pProduct
                - pRegion
                - pEnvironment
                - sn-b-pub-001
        - 
          Key: Environment
          Value: pEnvironment
      VpcId: rVPC
    Type: "AWS::EC2::Subnet"
  rSubnetBpub002: 
    Condition: cSubnetBpub002
    Properties: 
      AvailabilityZone: pRegionAZ2Name
      CidrBlock: pSubnetBpub002CIDR
      Tags: 
        - 
          Key: Name
          Value: 
            ? "Fn::Join"
            : 
              - "-"
              - 
                - pProduct
                - pRegion
                - pEnvironment
                - sn-b-pub-002
        - 
          Key: Environment
          Value: pEnvironment
      VpcId: rVPC
    Type: "AWS::EC2::Subnet"
  rVPC: 
    Properties: 
      CidrBlock: pVpcCIDR
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: pVPCTenancy
      Tags: 
        - 
          Key: Name
          Value: 
            ? "Fn::Join"
            : 
              - "-"
              - 
                - pProduct
                - pRegion
                - pEnvironment
                - vpc
        - 
          Key: Environment
          Value: pEnvironment
    Type: "AWS::EC2::VPC"
  rVPCDhcpOptions: 
    Properties: 
      DomainName: 
        - "."
        - 
          - pEnvironment
          - pRegion
          - pProduct
          - int.
      DomainNameServers: 
        - AmazonProvidedDNS
      Tags: 
        - 
          Key: Name
          Value: 
            - "."
            - 
              - pEnvironment
              - pRegion
              - pProduct
              - int.
    Type: "AWS::EC2::DHCPOptions"
  rVPCDhcpOptionsAssociation: 
    Properties: 
      DhcpOptionsId: 
        Ref: rVPCDhcpOptions
      VpcId: 
        Ref: rVPC
    Type: "AWS::EC2::VPCDHCPOptionsAssociation"
  rVpcFlowLogs: 
    Condition: cEnableFlowLogs
    Properties: 
      DeliverLogsPermissionArn: rIamFlowLogsServiceRole.Arn
      LogGroupName: 
        - "-"
        - 
          - pProduct
          - pRegion
          - pEnvironment
          - flowlogs
      ResourceId: rVPC
      ResourceType: VPC
      TrafficType: ALL
    Type: "AWS::EC2::FlowLog"
  rVpcFlowLogsStream: 
    Condition: cEnableFlowLogs
    Properties: 
      LogGroupName: 
        - "-"
        - 
          - pProduct
          - pRegion
          - pEnvironment
          - flowlogs
    Type: "AWS::Logs::LogStream"
